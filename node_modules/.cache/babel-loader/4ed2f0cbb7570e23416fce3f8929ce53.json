{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalQuantity: 0,\n  totalPrice: 0,\n  changed: false\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    replaceCart(state, action) {\n      state.items = action.payload.items;\n      state.totalQuantity = action.payload.totalQuantity;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.changed = true;\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.changed = true;\n      state.totalQuantity--;\n\n      if (state.totalQuantity === 0) {\n        state.items = [];\n      }\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/donghyun/Desktop/react/redux-http-request/src/store/cart-slice.js"],"names":["createSlice","initialState","items","totalQuantity","totalPrice","changed","cartSlice","name","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,aAAa,EAAE,CAA5B;AAA+BC,EAAAA,UAAU,EAAE,CAA3C;AAA8CC,EAAAA,OAAO,EAAE;AAAvD,CAArB;AAEA,MAAMC,SAAS,GAAGN,WAAW,CAAC;AAC5BO,EAAAA,IAAI,EAAE,MADsB;AAE5BN,EAAAA,YAF4B;AAG5BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAAP,CAAeV,KAA7B;AACAQ,MAAAA,KAAK,CAACP,aAAN,GAAsBQ,MAAM,CAACC,OAAP,CAAeT,aAArC;AACD,KAJO;;AAKRU,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACR,KAAN,CAAYc,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA7C,CAArB;AAEAR,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACAK,MAAAA,KAAK,CAACP,aAAN;;AAEA,UAAI,CAACY,YAAL,EAAmB;AACjBL,QAAAA,KAAK,CAACR,KAAN,CAAYiB,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADG;AAEfE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfjB,UAAAA,UAAU,EAAEU,OAAO,CAACM,KAJL;AAKfb,UAAAA,IAAI,EAAEO,OAAO,CAACQ;AALC,SAAjB;AAOD,OARD,MAQO;AACLP,QAAAA,YAAY,CAACM,QAAb,GAAwBN,YAAY,CAACM,QAAb,GAAwB,CAAhD;AACAN,QAAAA,YAAY,CAACX,UAAb,GAA0BW,YAAY,CAACX,UAAb,GAA0BU,OAAO,CAACM,KAA5D;AACD;AACF,KAxBO;;AAyBRG,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACR,KAAN,CAAYc,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AAEAR,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACAK,MAAAA,KAAK,CAACP,aAAN;;AAEA,UAAIO,KAAK,CAACP,aAAN,KAAwB,CAA5B,EAA+B;AAC7BO,QAAAA,KAAK,CAACR,KAAN,GAAc,EAAd;AACD;;AAED,UAAIa,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC/BX,QAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYsB,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACX,UAAb,GAA0BW,YAAY,CAACX,UAAb,GAA0BW,YAAY,CAACK,KAAjE;AACD;AACF;;AA1CO;AAHkB,CAAD,CAA7B;AAiDA,OAAO,MAAMK,WAAW,GAAGnB,SAAS,CAACoB,OAA9B;AAEP,eAAepB,SAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = { items: [], totalQuantity: 0, totalPrice: 0, changed: false };\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    replaceCart(state, action) {\n      state.items = action.payload.items;\n      state.totalQuantity = action.payload.totalQuantity;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      state.changed = true;\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      state.changed = true;\n      state.totalQuantity--;\n\n      if (state.totalQuantity === 0) {\n        state.items = [];\n      }\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}